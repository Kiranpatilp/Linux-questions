Task Scheduler:
---------------
https://leetcode.com/problems/task-scheduler/


Readers-Writers Problem:[VMWare, vsan, avi]
-----------------------
  https://www.geeksforgeeks.org/readers-writers-problem-set-1-introduction-and-readers-preference-solution/
  https://youtu.be/kn2Okc2cAaQ

https://www.geeksforgeeks.org/print-numbers-sequence-using-thread-synchronization/ [VMWare, vsan]

https://stackoverflow.com/questions/22004690/print-odd-and-even-numbers-using-2-threads-using-mutex-in-c


external sort:[VMWare, vsan]
-------------
  https://www.youtube.com/watch?v=Bp7fGofslng&list=PLcOwoju_D0aZ34BfwFcxA3Ba5hTSf36Ab&index=36&t=0s
  https://www.geeksforgeeks.org/external-sorting/


process state:[VMWare, vsan]
-------------
  https://www.geeksforgeeks.org/states-of-a-process-in-operating-systems/


thread state:[Intel]
------------
  https://www.geeksforgeeks.org/thread-states-in-operating-systems/?ref=rp


producer and consumer:[VMWare]
---------------------
  semaphore:
  ---------
    https://www.youtube.com/watch?v=hyQz97Jym_w
  mutex:
  ------
    PFA of "OS task management"


Ls implimentations:[VMWare, vsan]
------------------
  https://medium.com/@earthtojhuang/what-happens-when-you-type-ls-l-in-the-shell-8cf0c182baa8


LRU:[VMWare]
----
  https://www.geeksforgeeks.org/lru-cache-implementation/
  
 Design In-Memory File System[oracle]
 -----------------------------
 https://jerry4013.github.io/Github-blog/2020/08/03/LeetCode-588.html
 

Own memory allocation:[Nutanix]
---------------------
  https://www.geeksforgeeks.org/buddy-memory-allocation-program-set-1-allocation/
  https://www.geeksforgeeks.org/implementation-of-all-partition-allocation-methods-in-memory-management/?ref=rp


User thread and kernel thread:
-----------------------------
  http://www.cs.iit.edu/~cs561/cs450/ChilkuriDineshThreads/dinesh's%20files/User%20and%20Kernel%20Level%20Threads.html



seg fault:
---------
  https://www.cnblogs.com/no7dw/archive/2013/02/20/2918372.html


Two thread updating a variable (initial value of 0) without a lock, each thread uses a loop of 50 to increment a global variable.
What is the minimum and maximum possible value you can get?
Max: 100
Min: 2

A possible execution sequence that results in 2 is as follows (Rx means read x, Wx means write x, - other operation):

Thread #1: - - - - R0 W1 R1 W2 ... R48 W49 - - - - - R1 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - W2
Time Line: -------------------------------------------------------------------------------------------------------------------------------->
Thread #2: R0 - - - - - - - - - - - - - - - - - - - - - - - - W1 - - - - R1 W2 R2 W3 ... R48 W49 R49 W50




Caching with read & write problem:[VMWare, avi]
-------------------------------

question: 
    B Tree structure { input is a URL , output is the object corr. to the URL}
   root: /index.html , 100Bytes of data Obj
   root->left: /blah.html, 1000 bytes of data obj
   root->right: /ind.html , 1200Bytes of data Obj
   
   
   /foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoo.html. 
   
   struct node {
       void *obj;
       void *key;
       struct node *right, left;
       }
       
   Q1:
       Design a DS with a Key to lookup this Cache
       Limit the size of the Cache to N objects


solution: 
       struct node {
       void *obj;
       void key;  //convert url to hash search will be easy
       int *address; // store doubly linked list address, similer to LRU cache for DLL.
       struct node *right, *left;
       }
       
     Q2:
     multiple read single write problem.
     
     
Memory allocation 4byte boundary:[VMWare, avi]
--------------------------------
 Assume a system where it returns memory allocations on a byte boundary - i.e. malloc returns memory that is byte-aligned (as opposed to 8 or 4 byte boundary). 

 A program that you are writing requires memory allocations to happen on 4 byte boundaries. This requires you to write a custom memory allocation routine such 
 that it is a wrapper around the existing malloc routine to return 4-byte align memory. How would you do this?
 
 Solution:

int *memoryAlloc(int size)
{
    int *ptr = (int *)malloc(size + 4);
    int extra = 4 - (ptr % 4);
    *(ptr - 1) = extra;
      return ptr  + extra;
 }


void memoryFree(int *ptr)
{
    ptr = ptr - *(ptr - 1)
    free(ptr);
}

int SampleProgram()
{
    int *a = memoryAlloc(36);   // internally malloc returned address 0x47 ===> 0x48
    int *b = memoryAlloc(6 * sizeof(int));
    // user input value into the array,
    // user input value into array b
    // 2 array operations like summation
    // Print the result
    // ?? Free memory
    memoryFree(a);
    return 0;
}


Design own library to handle dynamic allocation/deallocation of memory. What data structure to maintain these information?  [Nutanix]
-------------------------------------------------------------------------------------------------------------------------


System design : Design a system which converts long URL into short URL. Need to handle insert/search, algorithm to have unique short URL for all long URL[VMWare, avi]
--------------------------------------------------------------------------------------------------------------------------------------------------------


Question:
----------------------------------------------------
You’re given an input file. Each line consists of a timestamp (unix epoch in seconds) and a url separated by ‘|’ (pipe operator).
The entries are not in any chronological order. Your task is to produce a summarized report on url hit count, sorted from highest hit count to lowest count, organized daily (use GMT) with the earliest date appearing first.
You should display the number of times each url is visited. Your program should take in one command line argument: input file name. The output should be printed to stdout.
You may assume that the number of unique hit counts and the number of days are much smaller than the number of unique URLs.
You may also assume that number of unique URLs can fit in memory. Please provide a complexity analysis in Big-O notation for your program
Example
input.txt

1407564301|www.nba.com
1407478021|www.facebook.com
1407478022|www.facebook.com
1407481200|news.ycombinator.com
1407478028|www.google.com
1407564301|sports.yahoo.com
1407564300|www.cnn.com
1407564300|www.nba.com
1407564300|www.nba.com
1407564301|sports.yahoo.com
1407478022|www.google.com
1407648022|www.twitter.com
Output

08/08/2014 GMT
www.facebook.com 2
www.google.com 2
news.ycombinator.com 1
08/09/2014 GMT
www.nba.com 3
sports.yahoo.com 2
www.cnn.com 1
08/10/2014 GMT
www.twitter.com 1
Time Complexity
The worst case time complexity of the program is O(n) where n = number of input lines in the input file.


solution :
package epoch;


import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.TimeZone;
import java.util.TreeMap;

public class URLMap {
	
	private static String convertEpochToDate(long epoch){
		Date dt = new Date((long) epoch);
		DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		df.setTimeZone(TimeZone.getTimeZone("GMT"));
		String dtStr = df.format(dt);
		return dtStr;
	}
	
	private static void createMap(String[] inputLines){
		Map<Long, Map<String,Integer>> dateToURLMap = new TreeMap<Long, Map<String,Integer>>();
		
		for (String line : inputLines) {
			String[] tokens = line.split("\\|");
			long epoch = Long.parseLong(tokens[0]) * 1000;
			epoch = (long)Math.floor(epoch / (24*60*60*1000));
			epoch = epoch * (24*60*60*1000);
			Map<String, Integer> urlToCntMap = dateToURLMap.get(epoch);
			if (urlToCntMap == null) {
				urlToCntMap = new HashMap<String, Integer>();
			}
			Integer cnt = urlToCntMap.get(tokens[1]);
			if (cnt == null) {
				cnt = 0;
			}
			cnt++;
			urlToCntMap.put(tokens[1], cnt);
			dateToURLMap.put(epoch, urlToCntMap);
		}
		for(Entry<Long, Map<String,Integer>> e : dateToURLMap.entrySet()){
			System.out.println(convertEpochToDate(e.getKey())+" GMT");
			Map<String,Integer> urlToCntMap = e.getValue();
			@SuppressWarnings("unchecked")
			Entry<String,Integer>[] countEntries = urlToCntMap.entrySet().toArray(new Entry[urlToCntMap.size()]);
			Arrays.sort(countEntries, new Comparator<Entry<String,Integer>>(){
				@Override
				public int compare(Entry<String, Integer> o1,
						Entry<String, Integer> o2) {
					return o2.getValue().compareTo(o1.getValue());
				}
			});
			for(Entry<String,Integer> en : countEntries){
				System.out.println(en.getKey()+" "+en.getValue());
			}
		}
	}
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		try{
			System.out.println("Enter a input file name");
			/*
			 * Enter the full path of the file
			 * Example: /home/nkatre/workspace/URLVisitor/src/epoch/input.txt
			 */
			String filename = in.nextLine();
			File f = new File(filename);
			if(f.exists()){
				String[] inputLines= null;
			    List<String> strList = new ArrayList<String>();
			    try 
			    { 
			        FileInputStream fstream = new FileInputStream(filename); 
			        DataInputStream data_input = new DataInputStream(fstream); 
			        @SuppressWarnings("resource")
					BufferedReader buffer = new BufferedReader(new InputStreamReader(data_input)); 
			        String str_line; 
			        while ((str_line = buffer.readLine()) != null) 
			        { 
			            str_line = str_line.trim(); 
			            if ((str_line.length()!=0))  
			            { 
			            	strList.add(str_line);
			            } 
			        }
			        inputLines = (String[])strList.toArray(new String[strList.size()]);
			    }
			    catch (Exception e)  
			    {
			        System.err.println("Error: " + e.getMessage());
			    }
				createMap(inputLines);
			}
			else{
			    System.out.println("Input file not present in current directory");
			}
		}
		finally{
			in.close();
		}
	}
}
/*
Time Complexity = O(n)
where n = number of input lines in the input file
*/
https://github.com/nkatre/URLVisitor
